import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewChild, Input, Output, SecurityContext, PLATFORM_ID, forwardRef, Inject, Attribute, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import * as i1 from '@angular/platform-browser';

const DEFAULT_LOCALES = {
    en: {
        Buttons: {
            Bold: { title: 'Bold', initText: 'Bold Text' },
            Italic: { title: 'Italic', initText: 'Italic Text' },
            Heading: { title: 'Heading' },
            Reference: { title: 'Reference' },
            Link: { title: 'Link' },
            Image: { title: 'Image' },
            UnorderedList: { title: 'Unordered List', initText: '' },
            OrderedList: { title: 'Ordered List', initText: '' },
            CodeBlock: { title: 'Code Block', initText: 'Source Code' },
            ShowPreview: { title: 'Show Preview' },
            HidePreview: { title: 'Hide Preview' },
            Fullscreen: { title: 'Fullscreen' }
        },
        Upload: {
            Drag: 'Drag it here',
            Uploading: 'Uploading'
        }
    }
};
const DEFAULT_ICONS = {
    fontAwesome4: {
        Bold: { fontClass: 'fa fa-bold' },
        Italic: { fontClass: 'fa fa-italic' },
        Heading: { fontClass: 'fa fa-header' },
        Reference: { fontClass: 'fa fa-quote-left' },
        Link: { fontClass: 'fa fa-link' },
        Image: { fontClass: 'fa fa-image' },
        UnorderedList: { fontClass: 'fa fa-list-ul' },
        OrderedList: { fontClass: 'fa fa-list-ol' },
        CodeBlock: { fontClass: 'fa fa-file-code-o' },
        ShowPreview: { fontClass: 'fa fa-eye' },
        HidePreview: { fontClass: 'fa fa-eye-slash' },
        FullScreen: { fontClass: 'fa fa-arrows-alt' },
        CheckBox_UnChecked: { fontClass: 'fa fa-square-o' },
        CheckBox_Checked: { fontClass: 'fa fa-check-square' },
    },
    fontAwesome5: {
        Bold: { fontClass: 'fas fa-bold' },
        Italic: { fontClass: 'fas fa-italic' },
        Heading: { fontClass: 'fas fa-heading' },
        Reference: { fontClass: 'fas fa-quote-left' },
        Link: { fontClass: 'fas fa-link' },
        Image: { fontClass: 'fas fa-image' },
        UnorderedList: { fontClass: 'fas fa-list-ul' },
        OrderedList: { fontClass: 'fas fa-list-ol' },
        CodeBlock: { fontClass: 'fas fa-file-code' },
        ShowPreview: { fontClass: 'fas fa-eye' },
        HidePreview: { fontClass: 'fas fa-eye-slash' },
        FullScreen: { fontClass: 'fas fa-compress' },
        CheckBox_UnChecked: { fontClass: 'far fa-square' },
        CheckBox_Checked: { fontClass: 'fas fa-check-square' }
    },
    fontAwesome6: {
        Bold: { fontClass: 'fa-solid fa-bold' },
        Italic: { fontClass: 'fa-solid fa-italic' },
        Heading: { fontClass: 'fa-solid fa-heading' },
        Reference: { fontClass: 'fa-solid fa-quote-left' },
        Link: { fontClass: 'fa-solid fa-link' },
        Image: { fontClass: 'fa-solid fa-image' },
        UnorderedList: { fontClass: 'fa-solid fa-list-ul' },
        OrderedList: { fontClass: 'fa-solid fa-list-ol' },
        CodeBlock: { fontClass: 'fa-solid fa-file-code' },
        ShowPreview: { fontClass: 'fa-solid fa-eye' },
        HidePreview: { fontClass: 'fa-solid fa-eye-slash' },
        FullScreen: { fontClass: 'fa-solid fa-maximize' },
        CheckBox_UnChecked: { fontClass: 'fa-regular fa-square' },
        CheckBox_Checked: { fontClass: 'fa-solid fa-check-square' }
    }
};

class MarkdownEditorResizeSensorComponent {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this.interval = 500;
        this.resize = new EventEmitter();
        this.sizeInfo = {
            width: 0,
            height: 0
        };
    }
    ngAfterViewInit() {
        this.sizeInfo = {
            width: this.resizeSensor.nativeElement.offsetWidth,
            height: this.resizeSensor.nativeElement.offsetHeight
        };
        this._ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.detectSize();
            }, this.interval);
        });
    }
    detectSize() {
        let width = this.resizeSensor.nativeElement.offsetWidth;
        let height = this.resizeSensor.nativeElement.offsetHeight;
        if (this.sizeInfo.width !== width || this.sizeInfo.height !== height) {
            this.sizeInfo = {
                width: width,
                height: height
            };
            this.resize.emit(this.sizeInfo);
        }
        setTimeout(() => {
            this.detectSize();
        }, this.interval);
    }
}
MarkdownEditorResizeSensorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: MarkdownEditorResizeSensorComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
MarkdownEditorResizeSensorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.0", type: MarkdownEditorResizeSensorComponent, selector: "md-editor-resize-sensor", inputs: { interval: "interval" }, outputs: { resize: "resize" }, viewQueries: [{ propertyName: "resizeSensor", first: true, predicate: ["resizeSensor"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"md-editor-resize-sensor\" #resizeSensor></div>\r\n", styles: [".md-editor-resize-sensor{position:absolute;inset:0;z-index:-1}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: MarkdownEditorResizeSensorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-editor-resize-sensor', template: "<div class=\"md-editor-resize-sensor\" #resizeSensor></div>\r\n", styles: [".md-editor-resize-sensor{position:absolute;inset:0;z-index:-1}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { resizeSensor: [{
                type: ViewChild,
                args: ['resizeSensor', { static: true }]
            }], interval: [{
                type: Input
            }], resize: [{
                type: Output
            }] } });

const DEFAULT_EDITOR_OPTION = {
    showPreviewPanel: true,
    showBorder: true,
    hideIcons: [],
    usingFontAwesome5: false,
    scrollPastEnd: 0,
    enablePreviewContentClick: false,
    resizable: false,
    customIcons: DEFAULT_ICONS.fontAwesome4,
    locales: DEFAULT_LOCALES,
    placeholder: ''
};
class MarkdownEditorComponent {
    constructor(platform, required = false, _ngZone, _renderer2, _domSanitizer) {
        this.platform = platform;
        this.required = required;
        this._ngZone = _ngZone;
        this._renderer2 = _renderer2;
        this._domSanitizer = _domSanitizer;
        this.hideToolbar = false;
        this.height = "300px";
        this._locale = 'en';
        this._maxlength = -1;
        this._mode = 'editor';
        this._options = Object.assign({}, DEFAULT_EDITOR_OPTION);
        this.onEditorLoaded = new EventEmitter();
        this.onPreviewDomChanged = new EventEmitter();
        this.hideIcons = {};
        this.showPreviewPanel = true;
        this.isFullScreen = false;
        this.dragover = false;
        this.isUploading = false;
        this.valueChanges = new Subject();
        this._onChange = (_) => { };
        this._onTouched = () => { };
    }
    get locale() { return this._locale || 'en'; }
    set locale(val) { this._locale = val; }
    get maxlength() {
        return this._maxlength;
    }
    set maxlength(val) {
        if (!Number.isInteger(val))
            val = parseInt(val, 10);
        if (Number.isInteger(val))
            this._maxlength = val;
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = (!value || ['editor', 'preview'].indexOf(value.toLowerCase()) === -1)
            ? 'editor'
            : value;
        setTimeout(() => {
            if (this._aceEditorIns && typeof this._aceEditorIns.resize === 'function') {
                this._aceEditorIns.resize();
            }
        }, 100);
    }
    get options() {
        return this._options;
    }
    set options(value) {
        const options = Object.assign({}, DEFAULT_EDITOR_OPTION, value);
        let defaultIcons = DEFAULT_ICONS.fontAwesome4;
        if (value.fontAwesomeVersion && ['4', '5', '6'].indexOf(value.fontAwesomeVersion.toString()) !== -1) {
            defaultIcons = DEFAULT_ICONS[`fontAwesome${value.fontAwesomeVersion}`];
        }
        else if (value.usingFontAwesome5) {
            defaultIcons = DEFAULT_ICONS.fontAwesome5;
        }
        if (typeof options.showPreviewPanel === 'boolean') {
            this.showPreviewPanel = options.showPreviewPanel;
        }
        options.customIcons = Object.assign({}, defaultIcons, value.customIcons);
        const hideIcons = {};
        if (Array.isArray(options.hideIcons)) {
            options.hideIcons.forEach((v) => {
                if (v === 'Refrence')
                    v = 'Reference';
                hideIcons[v] = true;
            });
        }
        this.hideIcons = hideIcons;
        options.locales = Object.assign({}, DEFAULT_LOCALES, value.locales);
        this._options = options;
        if (this._aceEditorIns)
            this._aceEditorIns.setOption('placeholder', this.options.placeholder || '');
    }
    get localeText() {
        const r = Object.assign({}, DEFAULT_LOCALES[this.locale], this.options.locales[this.locale]);
        return Object.assign({}, DEFAULT_LOCALES.en, r);
    }
    get buttonText() { return this.localeText.Buttons; }
    get uploadText() { return this.localeText.Upload; }
    //#region Markdown value and html value define
    get markdownValue() {
        return this._markdownValue || '';
    }
    set markdownValue(value) {
        this._markdownValue = value || '';
        this.valueChanges.next(this.markdownValue);
    }
    get _hasUploadFunction() {
        return this.upload && this.upload instanceof Function;
    }
    get _isInBrowser() {
        return isPlatformBrowser(this.platform);
    }
    ngOnInit() {
        if (!this._isInBrowser)
            return;
        let markedRender = new marked.Renderer();
        markedRender.image = this._getRender('image');
        markedRender.code = this._getRender('code');
        markedRender.table = this._getRender('table');
        markedRender.listitem = this._getRender('listitem');
        let markedjsOpt = {
            renderer: markedRender,
            highlight: (code) => hljs.highlightAuto(code).value
        };
        this._markedJsOpt = Object.assign({}, markedjsOpt, this.options.markedjsOpt);
        if (this._markedJsOpt.sanitize === true && typeof this._markedJsOpt.sanitizer !== 'function') {
            this._markedJsOpt.sanitizer = (markdownString) => {
                return this._domSanitizer.sanitize(SecurityContext.HTML, markdownString);
            };
        }
    }
    ngAfterViewInit() {
        if (!this._isInBrowser)
            return;
        let editorElement = this.aceEditorContainer.nativeElement;
        let editor = ace.edit(editorElement);
        editor.$blockScrolling = Infinity;
        editor.getSession().setUseWrapMode(true);
        editor.getSession().setMode("ace/mode/markdown");
        editor.setValue(this.markdownValue, 1);
        editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);
        editor.on('change', (e) => {
            if (this._isValueSettedByprogrammatically)
                return;
            let val = editor.getValue();
            this._updateMarkdownValue(val, true);
            this._onChange(this.markdownValue);
        });
        editor.on('blur', () => { this._onTouched(); });
        editor.setOption('placeholder', this.options.placeholder || '');
        this.onEditorLoaded.next(editor);
        this._aceEditorIns = editor;
    }
    ngOnDestroy() {
        this._aceEditorIns && this._aceEditorIns.destroy();
        this.valueChanges && this.valueChanges.complete();
    }
    writeValue(value) {
        this._updateMarkdownValue(value, false);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    validate(c) {
        let result = null;
        if (this.required && this.markdownValue.length === 0) {
            result = { required: true };
        }
        if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {
            result = { maxlength: true };
        }
        return result;
    }
    insertContent(type, customContent) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!this._aceEditorIns)
            return;
        let selectedText = this._aceEditorIns.getSelectedText();
        let isSelected = !!selectedText;
        let startSize = 2;
        let initText = '';
        let range = this._aceEditorIns.selection.getRange();
        switch (type) {
            case 'Bold':
                initText = (_a = this.buttonText.Bold.initText) !== null && _a !== void 0 ? _a : this.buttonText.Bold.title;
                selectedText = `**${selectedText || initText}**`;
                break;
            case 'Italic':
                initText = (_b = this.buttonText.Italic.initText) !== null && _b !== void 0 ? _b : this.buttonText.Italic.title;
                selectedText = `*${selectedText || initText}*`;
                startSize = 1;
                break;
            case 'Heading':
                initText = (_c = this.buttonText.Heading.initText) !== null && _c !== void 0 ? _c : this.buttonText.Heading.title;
                selectedText = `# ${selectedText || initText}`;
                break;
            case 'Reference':
                initText = (_d = this.buttonText.Reference.initText) !== null && _d !== void 0 ? _d : this.buttonText.Reference.title;
                selectedText = `> ${selectedText || initText}`;
                break;
            case 'Link':
                selectedText = `[](http://)`;
                startSize = 1;
                break;
            case 'Image':
                selectedText = `![](http://)`;
                break;
            case 'Ul':
                initText = (_e = this.buttonText.UnorderedList.initText) !== null && _e !== void 0 ? _e : this.buttonText.UnorderedList.title;
                selectedText = `- ${selectedText || initText}`;
                break;
            case 'Ol':
                initText = (_f = this.buttonText.OrderedList.initText) !== null && _f !== void 0 ? _f : this.buttonText.OrderedList.title;
                selectedText = `1. ${selectedText || initText}`;
                startSize = 3;
                break;
            case 'Code':
                initText = (_g = this.buttonText.CodeBlock.initText) !== null && _g !== void 0 ? _g : this.buttonText.CodeBlock.title;
                selectedText = "```language\r\n" + (selectedText || initText) + "\r\n```";
                startSize = 3;
                break;
            case 'Custom':
                selectedText = customContent;
                startSize = 0;
                break;
        }
        this._aceEditorIns.session.replace(range, selectedText);
        if (!isSelected) {
            range.start.column += startSize;
            range.end.column = range.start.column + initText.length;
            this._aceEditorIns.selection.setRange(range);
        }
        this._aceEditorIns.focus();
    }
    togglePreview() {
        this.showPreviewPanel = !this.showPreviewPanel;
        this.editorResize();
    }
    previewPanelClick(event) {
        if (this.options.enablePreviewContentClick !== true) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
    fullScreen() {
        this.isFullScreen = !this.isFullScreen;
        this._renderer2.setStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');
        this.editorResize();
    }
    mdEditorResize(size) {
        this.editorResize();
    }
    editorResize(timeOut = 100) {
        if (!this._aceEditorIns)
            return;
        if (this._aceEditorResizeTimer)
            clearTimeout(this._aceEditorResizeTimer);
        this._aceEditorResizeTimer = setTimeout(() => {
            this._aceEditorIns.resize();
            this._aceEditorIns.focus();
        }, timeOut);
    }
    onDragover(evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        if (!this._hasUploadFunction)
            return;
        this.dragover = true;
    }
    onDrop(evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        this._uploadFiles(evt.dataTransfer.files);
    }
    onDragleave(evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        this.dragover = false;
        if (!this._hasUploadFunction)
            return;
    }
    onAceEditorPaste(event) {
        if (event instanceof ClipboardEvent && event.clipboardData.files.length > 0) {
            this._uploadFiles(event.clipboardData.files);
        }
    }
    _updateMarkdownValue(value, changedByUser = false) {
        const normalizedValue = typeof value === 'string' ? value : (value || '').toString();
        if (this.markdownValue === normalizedValue)
            return;
        this.markdownValue = normalizedValue;
        this._updateDom();
        if (this._aceEditorIns && !changedByUser) {
            this._isValueSettedByprogrammatically = true;
            this._aceEditorIns.setValue(normalizedValue, 1);
            this._isValueSettedByprogrammatically = false;
        }
    }
    _updateDom() {
        if (this._convertMarkdownToHtmlTimer)
            clearTimeout(this._convertMarkdownToHtmlTimer);
        this._convertMarkdownToHtmlTimer = setTimeout(() => {
            Promise.resolve(this.markdownValue)
                .then((mdContent) => {
                return (this.preRender && this.preRender instanceof Function) ? this.preRender(mdContent) : mdContent;
            })
                .then(mdContent => {
                let html = marked(mdContent || '', this._markedJsOpt);
                return (this.postRender && this.postRender instanceof Function) ? this.postRender(html) : html;
            })
                .then(parsedHtml => {
                this.previewHtml = this._domSanitizer.bypassSecurityTrustHtml(parsedHtml);
                if (this.previewContainer && this.previewContainer.nativeElement) {
                    this._ngZone.runOutsideAngular(() => {
                        this._renderer2.setProperty(this.previewContainer.nativeElement, 'innerHTML', parsedHtml);
                        setTimeout(() => { this.onPreviewDomChanged.next(this.previewContainer.nativeElement); }, 100);
                    });
                }
            })
                .catch(err => {
                console.error(err);
            });
        }, 100);
    }
    _getRender(renderType) {
        let customRender = this.options && this.options.customRender && this.options.customRender[renderType];
        if (customRender && typeof customRender === 'function') {
            return customRender;
        }
        else {
            switch (renderType) {
                case 'image':
                    return function (href, title, text) {
                        let out = `<img style="max-width: 100%;" src="${href}" alt="${text}"`;
                        if (title) {
                            out += ` title="${title}"`;
                        }
                        out += this.options.xhtml ? "/>" : ">";
                        return out;
                    };
                case 'code':
                    return function (code, language) {
                        let validLang = !!(language && hljs.getLanguage(language));
                        let highlighted = '';
                        if (validLang) {
                            highlighted = hljs.highlight(language, code).value;
                        }
                        else {
                            let pre = document.createElement('pre');
                            pre.innerText = code;
                            highlighted = pre.innerHTML;
                        }
                        return `<pre style="padding: 0; border-radius: 0;"><code class="hljs ${language}">${highlighted}</code></pre>`;
                    };
                case 'table':
                    return function (header, body) {
                        return `<table class="table table-bordered">\n<thead>\n${header}</thead>\n<tbody>\n${body}</tbody>\n</table>\n`;
                    };
                case 'listitem':
                    const checkedCheckbox = `<i class="${this.options.customIcons.CheckBox_Checked.fontClass}"></i> `, unCheckedCheckbox = `<i class="${this.options.customIcons.CheckBox_UnChecked.fontClass}"></i> `;
                    return function (text, task, checked) {
                        if (/^\s*\[[x ]\]\s*/.test(text) || text.startsWith('<input')) {
                            if (text.startsWith('<input')) {
                                text = text
                                    .replace('<input disabled="" type="checkbox">', unCheckedCheckbox)
                                    .replace('<input checked="" disabled="" type="checkbox">', checkedCheckbox);
                            }
                            else {
                                text = text
                                    .replace(/^\s*\[ \]\s*/, unCheckedCheckbox)
                                    .replace(/^\s*\[x\]\s*/, checkedCheckbox);
                            }
                            return `<li>${text}</li>`;
                        }
                        else {
                            return `<li>${text}</li>`;
                        }
                    };
            }
        }
    }
    _uploadFiles(files) {
        if (!this._hasUploadFunction || this.isUploading)
            return;
        if (!files || files.length === 0) {
            this.dragover = false;
            return;
        }
        this.isUploading = true;
        // force dragover to be true, as Uploading mask won't work otherwise
        this.dragover = true;
        Promise.resolve()
            .then(() => {
            return this.upload(files);
        })
            .then(data => {
            if (Array.isArray(data)) {
                let msg = [];
                for (let item of data) {
                    let tempMsg = `[${item.name}](${item.url})`;
                    if (item.isImg) {
                        tempMsg = `!${tempMsg}`;
                    }
                    msg.push(tempMsg);
                }
                const range = this._aceEditorIns.selection.getRange();
                const newRange = { start: { column: 0, row: range.end.row + 1 }, end: { column: 0, row: range.end.row + 1 } };
                this._aceEditorIns.session.replace(newRange, '\r\n');
                this._aceEditorIns.selection.setRange(newRange);
                this._aceEditorIns.focus();
                this.insertContent('Custom', msg.join('\r\n'));
            }
            else {
                console.warn('Invalid upload result. Please using follow this type `UploadResult`.');
            }
            this.isUploading = false;
            this.dragover = false;
        })
            .catch(err => {
            console.error(err);
            this.isUploading = false;
            this.dragover = false;
        });
    }
}
MarkdownEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: MarkdownEditorComponent, deps: [{ token: PLATFORM_ID }, { token: 'required', attribute: true }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
MarkdownEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.0", type: MarkdownEditorComponent, selector: "md-editor", inputs: { hideToolbar: "hideToolbar", height: "height", preRender: "preRender", postRender: "postRender", upload: "upload", locale: "locale", maxlength: "maxlength", mode: "mode", options: "options" }, outputs: { onEditorLoaded: "onEditorLoaded", onPreviewDomChanged: "onPreviewDomChanged" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MarkdownEditorComponent),
            multi: true
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => MarkdownEditorComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "aceEditorContainer", first: true, predicate: ["aceEditor"], descendants: true, static: true }, { propertyName: "previewContainer", first: true, predicate: ["previewContainer"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"md-editor-container\" [class.fullscreen]=\"isFullScreen\" [class.md-editor-resizable]=\"options?.resizable\" [style.height]=\"height\">\r\n  <div class=\"md-layout\">\r\n    <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Bold.title\" (click)=\"insertContent('Bold')\"\r\n          *ngIf=\"!hideIcons.Bold\">\r\n          <i [class]=\"options.customIcons.Bold.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Italic.title\" (click)=\"insertContent('Italic')\"\r\n          *ngIf=\"!hideIcons.Italic\">\r\n          <i [class]=\"options.customIcons.Italic.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Heading.title\" (click)=\"insertContent('Heading')\"\r\n          *ngIf=\"!hideIcons.Heading\">\r\n          <i [class]=\"options.customIcons.Heading.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Reference.title\" (click)=\"insertContent('Reference')\"\r\n          *ngIf=\"!hideIcons.Reference\">\r\n          <i [class]=\"options.customIcons.Reference.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Link.title\" (click)=\"insertContent('Link')\"\r\n          *ngIf=\"!hideIcons.Link\">\r\n          <i [class]=\"options.customIcons.Link.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Image.title\" (click)=\"insertContent('Image')\"\r\n          *ngIf=\"!hideIcons.Image\">\r\n          <i [class]=\"options.customIcons.Image.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.UnorderedList.title\" (click)=\"insertContent('Ul')\"\r\n          *ngIf=\"!hideIcons.Ul\">\r\n          <i [class]=\"options.customIcons.UnorderedList.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.OrderedList.title\" (click)=\"insertContent('Ol')\"\r\n          *ngIf=\"!hideIcons.Ol\">\r\n          <i [class]=\"options.customIcons.OrderedList.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.CodeBlock.title\" (click)=\"insertContent('Code')\"\r\n          *ngIf=\"!hideIcons.Code\">\r\n          <i [class]=\"options.customIcons.CodeBlock.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\"\r\n          [attr.title]=\"showPreviewPanel ? buttonText.HidePreview.title : buttonText.ShowPreview.title\" (click)=\"togglePreview()\"\r\n          *ngIf=\"!hideIcons.TogglePreview\">\r\n          <i [class]=\"showPreviewPanel ? options.customIcons.ShowPreview.fontClass : options.customIcons.HidePreview.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <ng-content select=\"[custom-btns]\"></ng-content>\r\n      </div>\r\n      <div class=\"btn-group pull-right hide-split\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" [attr.title]=\"buttonText.Fullscreen.title\"\r\n          (click)=\"fullScreen()\" *ngIf=\"!hideIcons.FullScreen\">\r\n          <i [class]=\"options.customIcons.FullScreen.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"editor-container\">\r\n      <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\" (dragover)=\"onDragover($event)\"\r\n        (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\">\r\n        <div class=\"drag-container\" *ngIf=\"isUploading\">\r\n          <div class=\"upload-loading\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" *ngIf=\"!isUploading\" fill=\"#fff\">\r\n              <path\r\n                d=\"M288 109.3V352c0 17.7-14.3 32-32 32s-32-14.3-32-32V109.3l-73.4 73.4c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l128-128c12.5-12.5 32.8-12.5 45.3 0l128 128c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L288 109.3zM64 352H192c0 35.3 28.7 64 64 64s64-28.7 64-64H448c35.3 0 64 28.7 64 64v32c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V416c0-35.3 28.7-64 64-64zM432 456c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z\" />\r\n            </svg>\r\n            <div class=\"lds-dual-ring\" *ngIf=\"isUploading\"></div>\r\n            <div class=\"text\">{{ isUploading ? uploadText.Uploading : uploadText.Drag }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"editor-panel\" contenteditable=\"true\" (paste)=\"onAceEditorPaste($event)\">\r\n          <div class=\"ace-editor\" #aceEditor></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"preview-container\" [style.display]=\"(mode == 'preview' || showPreviewPanel) ? 'block' : 'none'\"\r\n        (click)=\"previewPanelClick($event)\">\r\n        <div class=\"preview-panel\" #previewContainer></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"md-footer\" *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n      <div class=\"text-right length-view\">\r\n        {{ markdownValue?.length }} / {{ maxlength }}\r\n      </div>\r\n      <div class=\"resize-btn\"></div>\r\n    </div>\r\n  </div>\r\n  <md-editor-resize-sensor *ngIf=\"options?.resizable\" (resize)=\"mdEditorResize($event)\"></md-editor-resize-sensor>\r\n</div>\r\n", styles: [".md-editor-container{position:relative;height:100%;margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99999999}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:hidden;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-layout .editor-container{height:calc(100% - 70px)}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .md-layout .tool-bar .btn-group{padding:6px}.md-editor-container .md-layout .tool-bar .btn-group:first-child:before{display:none}.md-editor-container .md-layout .tool-bar .btn-group:empty{display:none}.md-editor-container .md-layout .tool-bar .btn-group:not(:empty):before{content:\" \";background-color:#a9a9a9;width:1px;height:20px;left:0;top:12px;position:absolute}.md-editor-container .md-layout .tool-bar .btn-group.hide-split:before{display:none}.md-editor-container .md-layout .tool-bar .btn{margin-bottom:0}.md-editor-container .md-layout .editor-container{flex:1;display:flex;height:calc(100% - 100px)}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container>div .drag-container{display:none}.md-editor-container .md-layout .editor-container>div.dragover{position:relative;border:2px dashed lightgreen;box-sizing:border-box}.md-editor-container .md-layout .editor-container>div.dragover .drag-container{display:block;position:absolute;inset:0;z-index:10;background-color:#0006;display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .md-layout .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .md-layout .editor-container .editor-panel{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-container{overflow:auto}.md-editor-container .md-layout .preview-container .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px}.md-editor-container .md-layout .md-footer{background-color:#f0f0f0;border-top:1px solid rgba(0,0,0,.1);display:flex;align-items:center}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}.md-editor-container .pull-right{float:right}.md-editor-container .lds-dual-ring{display:inline-block;width:80px;height:80px}.md-editor-container .lds-dual-ring:after{content:\" \";display:block;width:64px;height:64px;margin:8px;border-radius:50%;border:6px solid #fff;border-color:#fff transparent #fff transparent;animation:lds-dual-ring 1.2s linear infinite}@keyframes lds-dual-ring{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: MarkdownEditorResizeSensorComponent, selector: "md-editor-resize-sensor", inputs: ["interval"], outputs: ["resize"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: MarkdownEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-editor', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MarkdownEditorComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => MarkdownEditorComponent),
                            multi: true
                        }
                    ], template: "<div class=\"md-editor-container\" [class.fullscreen]=\"isFullScreen\" [class.md-editor-resizable]=\"options?.resizable\" [style.height]=\"height\">\r\n  <div class=\"md-layout\">\r\n    <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Bold.title\" (click)=\"insertContent('Bold')\"\r\n          *ngIf=\"!hideIcons.Bold\">\r\n          <i [class]=\"options.customIcons.Bold.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Italic.title\" (click)=\"insertContent('Italic')\"\r\n          *ngIf=\"!hideIcons.Italic\">\r\n          <i [class]=\"options.customIcons.Italic.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Heading.title\" (click)=\"insertContent('Heading')\"\r\n          *ngIf=\"!hideIcons.Heading\">\r\n          <i [class]=\"options.customIcons.Heading.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Reference.title\" (click)=\"insertContent('Reference')\"\r\n          *ngIf=\"!hideIcons.Reference\">\r\n          <i [class]=\"options.customIcons.Reference.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Link.title\" (click)=\"insertContent('Link')\"\r\n          *ngIf=\"!hideIcons.Link\">\r\n          <i [class]=\"options.customIcons.Link.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.Image.title\" (click)=\"insertContent('Image')\"\r\n          *ngIf=\"!hideIcons.Image\">\r\n          <i [class]=\"options.customIcons.Image.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.UnorderedList.title\" (click)=\"insertContent('Ul')\"\r\n          *ngIf=\"!hideIcons.Ul\">\r\n          <i [class]=\"options.customIcons.UnorderedList.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.OrderedList.title\" (click)=\"insertContent('Ol')\"\r\n          *ngIf=\"!hideIcons.Ol\">\r\n          <i [class]=\"options.customIcons.OrderedList.fontClass\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"buttonText.CodeBlock.title\" (click)=\"insertContent('Code')\"\r\n          *ngIf=\"!hideIcons.Code\">\r\n          <i [class]=\"options.customIcons.CodeBlock.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\"\r\n          [attr.title]=\"showPreviewPanel ? buttonText.HidePreview.title : buttonText.ShowPreview.title\" (click)=\"togglePreview()\"\r\n          *ngIf=\"!hideIcons.TogglePreview\">\r\n          <i [class]=\"showPreviewPanel ? options.customIcons.ShowPreview.fontClass : options.customIcons.HidePreview.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <ng-content select=\"[custom-btns]\"></ng-content>\r\n      </div>\r\n      <div class=\"btn-group pull-right hide-split\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" [attr.title]=\"buttonText.Fullscreen.title\"\r\n          (click)=\"fullScreen()\" *ngIf=\"!hideIcons.FullScreen\">\r\n          <i [class]=\"options.customIcons.FullScreen.fontClass\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"editor-container\">\r\n      <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\" (dragover)=\"onDragover($event)\"\r\n        (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\">\r\n        <div class=\"drag-container\" *ngIf=\"isUploading\">\r\n          <div class=\"upload-loading\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" *ngIf=\"!isUploading\" fill=\"#fff\">\r\n              <path\r\n                d=\"M288 109.3V352c0 17.7-14.3 32-32 32s-32-14.3-32-32V109.3l-73.4 73.4c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l128-128c12.5-12.5 32.8-12.5 45.3 0l128 128c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L288 109.3zM64 352H192c0 35.3 28.7 64 64 64s64-28.7 64-64H448c35.3 0 64 28.7 64 64v32c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V416c0-35.3 28.7-64 64-64zM432 456c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z\" />\r\n            </svg>\r\n            <div class=\"lds-dual-ring\" *ngIf=\"isUploading\"></div>\r\n            <div class=\"text\">{{ isUploading ? uploadText.Uploading : uploadText.Drag }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"editor-panel\" contenteditable=\"true\" (paste)=\"onAceEditorPaste($event)\">\r\n          <div class=\"ace-editor\" #aceEditor></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"preview-container\" [style.display]=\"(mode == 'preview' || showPreviewPanel) ? 'block' : 'none'\"\r\n        (click)=\"previewPanelClick($event)\">\r\n        <div class=\"preview-panel\" #previewContainer></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"md-footer\" *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n      <div class=\"text-right length-view\">\r\n        {{ markdownValue?.length }} / {{ maxlength }}\r\n      </div>\r\n      <div class=\"resize-btn\"></div>\r\n    </div>\r\n  </div>\r\n  <md-editor-resize-sensor *ngIf=\"options?.resizable\" (resize)=\"mdEditorResize($event)\"></md-editor-resize-sensor>\r\n</div>\r\n", styles: [".md-editor-container{position:relative;height:100%;margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99999999}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:hidden;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-layout .editor-container{height:calc(100% - 70px)}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .md-layout .tool-bar .btn-group{padding:6px}.md-editor-container .md-layout .tool-bar .btn-group:first-child:before{display:none}.md-editor-container .md-layout .tool-bar .btn-group:empty{display:none}.md-editor-container .md-layout .tool-bar .btn-group:not(:empty):before{content:\" \";background-color:#a9a9a9;width:1px;height:20px;left:0;top:12px;position:absolute}.md-editor-container .md-layout .tool-bar .btn-group.hide-split:before{display:none}.md-editor-container .md-layout .tool-bar .btn{margin-bottom:0}.md-editor-container .md-layout .editor-container{flex:1;display:flex;height:calc(100% - 100px)}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container>div .drag-container{display:none}.md-editor-container .md-layout .editor-container>div.dragover{position:relative;border:2px dashed lightgreen;box-sizing:border-box}.md-editor-container .md-layout .editor-container>div.dragover .drag-container{display:block;position:absolute;inset:0;z-index:10;background-color:#0006;display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .md-layout .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .md-layout .editor-container .editor-panel{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-container{overflow:auto}.md-editor-container .md-layout .preview-container .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px}.md-editor-container .md-layout .md-footer{background-color:#f0f0f0;border-top:1px solid rgba(0,0,0,.1);display:flex;align-items:center}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}.md-editor-container .pull-right{float:right}.md-editor-container .lds-dual-ring{display:inline-block;width:80px;height:80px}.md-editor-container .lds-dual-ring:after{content:\" \";display:block;width:64px;height:64px;margin:8px;border-radius:50%;border:6px solid #fff;border-color:#fff transparent #fff transparent;animation:lds-dual-ring 1.2s linear infinite}@keyframes lds-dual-ring{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: Object, decorators: [{
                        type: Inject,
                        args: [PLATFORM_ID]
                    }] }, { type: undefined, decorators: [{
                        type: Attribute,
                        args: ['required']
                    }] }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i1.DomSanitizer }];
    }, propDecorators: { aceEditorContainer: [{
                type: ViewChild,
                args: ['aceEditor', { static: true }]
            }], previewContainer: [{
                type: ViewChild,
                args: ['previewContainer', { static: true }]
            }], hideToolbar: [{
                type: Input
            }], height: [{
                type: Input
            }], preRender: [{
                type: Input
            }], postRender: [{
                type: Input
            }], upload: [{
                type: Input
            }], locale: [{
                type: Input
            }], maxlength: [{
                type: Input,
                args: ['maxlength']
            }], mode: [{
                type: Input
            }], options: [{
                type: Input
            }], onEditorLoaded: [{
                type: Output
            }], onPreviewDomChanged: [{
                type: Output
            }] } });

class LMarkdownEditorModule {
}
LMarkdownEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: LMarkdownEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LMarkdownEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.1.0", ngImport: i0, type: LMarkdownEditorModule, declarations: [MarkdownEditorComponent,
        MarkdownEditorResizeSensorComponent], imports: [CommonModule,
        FormsModule], exports: [MarkdownEditorComponent,
        MarkdownEditorResizeSensorComponent] });
LMarkdownEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: LMarkdownEditorModule, imports: [CommonModule,
        FormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: LMarkdownEditorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        MarkdownEditorComponent,
                        MarkdownEditorResizeSensorComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    exports: [
                        MarkdownEditorComponent,
                        MarkdownEditorResizeSensorComponent
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LMarkdownEditorModule, MarkdownEditorComponent, MarkdownEditorResizeSensorComponent };
//# sourceMappingURL=ngx-markdown-editor.mjs.map

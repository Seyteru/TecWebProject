import { Renderer2, EventEmitter, ElementRef, NgZone } from '@angular/core';
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { MdEditorOption } from './md-editor.types';
import * as i0 from "@angular/core";
export declare class MarkdownEditorComponent implements ControlValueAccessor, Validator {
    private platform;
    required: boolean;
    private _ngZone;
    private _renderer2;
    private _domSanitizer;
    aceEditorContainer: ElementRef;
    previewContainer: ElementRef;
    hideToolbar: boolean;
    height: string;
    preRender: Function;
    postRender: Function;
    upload: Function;
    get locale(): string;
    set locale(val: string);
    _locale: string;
    get maxlength(): number;
    set maxlength(val: number | string);
    private _maxlength;
    get mode(): string;
    set mode(value: string);
    private _mode;
    get options(): MdEditorOption;
    set options(value: MdEditorOption);
    private _options;
    onEditorLoaded: EventEmitter<any>;
    onPreviewDomChanged: EventEmitter<HTMLElement>;
    hideIcons: any;
    showPreviewPanel: boolean;
    isFullScreen: boolean;
    dragover: boolean;
    isUploading: boolean;
    readonly valueChanges: Subject<string>;
    get localeText(): import("./md-editor.types").MdEditorLocale;
    get buttonText(): {
        Bold?: import("./md-editor.types").MdButtonInserterLocale;
        Italic?: import("./md-editor.types").MdButtonInserterLocale;
        Heading?: import("./md-editor.types").MdButtonInserterLocale;
        Reference?: import("./md-editor.types").MdButtonInserterLocale;
        Link?: import("./md-editor.types").MdButtonLocale;
        Image?: import("./md-editor.types").MdButtonLocale;
        UnorderedList?: import("./md-editor.types").MdButtonInserterLocale;
        OrderedList?: import("./md-editor.types").MdButtonInserterLocale;
        CodeBlock?: import("./md-editor.types").MdButtonInserterLocale;
        ShowPreview?: import("./md-editor.types").MdButtonLocale;
        HidePreview?: import("./md-editor.types").MdButtonLocale;
        Fullscreen?: import("./md-editor.types").MdButtonLocale;
    };
    get uploadText(): {
        Drag?: string;
        Uploading?: string;
    };
    get markdownValue(): string;
    private set markdownValue(value);
    private _markdownValue;
    previewHtml: any;
    private _aceEditorIns;
    private _aceEditorResizeTimer;
    private _convertMarkdownToHtmlTimer;
    private _markedJsOpt;
    private _isValueSettedByprogrammatically;
    private get _hasUploadFunction();
    private get _isInBrowser();
    private _onChange;
    private _onTouched;
    constructor(platform: Object, required: boolean, _ngZone: NgZone, _renderer2: Renderer2, _domSanitizer: DomSanitizer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: string): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    validate(c: AbstractControl): ValidationErrors;
    insertContent(type: string, customContent?: string): void;
    togglePreview(): void;
    previewPanelClick(event: Event): void;
    fullScreen(): void;
    mdEditorResize(size: any): void;
    editorResize(timeOut?: number): void;
    onDragover(evt: DragEvent): void;
    onDrop(evt: DragEvent): void;
    onDragleave(evt: DragEvent): void;
    onAceEditorPaste(event: ClipboardEvent): void;
    private _updateMarkdownValue;
    private _updateDom;
    private _getRender;
    private _uploadFiles;
    static ɵfac: i0.ɵɵFactoryDeclaration<MarkdownEditorComponent, [null, { attribute: "required"; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MarkdownEditorComponent, "md-editor", never, { "hideToolbar": "hideToolbar"; "height": "height"; "preRender": "preRender"; "postRender": "postRender"; "upload": "upload"; "locale": "locale"; "maxlength": "maxlength"; "mode": "mode"; "options": "options"; }, { "onEditorLoaded": "onEditorLoaded"; "onPreviewDomChanged": "onPreviewDomChanged"; }, never, ["[custom-btns]"], false, never>;
}
